% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
Ceystroke --- a text decorator for drawing keyboard keys
E-mail: jwrg@uvic.ca
Released under the LGPLv3
----------------------------------------------------------------

This file is intended to be used to draw keyboard keys around
text for calling out keyboard shortcuts and chords.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
\expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
Ceystroke --- a text decorator for drawing keyboard keys
E-mail: jwrg@uvic.ca
Released under the LGPLv3
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2019 by jwrg <jwrg@uvic.ca>

This work may be distributed and/or modified under the
conditions of the GNU Lesser General Public License v3 (LGPLv3)

https://www.gnu.org/licenses/lgpl-3.0.txt

jwrg

This work consists of the file  ceystroke.dtx
and the derived files           ceystroke.ins,
                                ceystroke.pdf and
                                ceystroke.sty.

\endpostamble
\usedir{tex/latex/capiar/ceystroke}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/capiar/ceystroke}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/capiar/ceystroke}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
\expandafter\endbatchfile
\else
\expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{ceystroke}[2019/12/05 v1.0 Ceystroke text decorator]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{\jobname.sty}
%
%\title{^^A
%  \textsf{Ceystroke} --- Decorate text as keys on a keyboard\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{^^A
%  jwrg\thanks{E-mail: jwrg@uvic.ca}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v1.0}{2019/12/05}{First public release}
%
%\section{Introduction}
% This package provides a decoration for text so that the text
% ends up looking as though it were superimposed on a key on
% a keyboard.  As of right now, this package is not super
% flexible or pretty, but it works and the result looks good
% enough for my cheat sheets.
%
%\section{Usage}
% The package provides one macro, \DescribeMacro{\keystroke}
% \cs{keystroke} \marg{text}.  Self-explanatory, it takes an
% argument and decorates the text to look like a key from a
% keyboard, useful for illustrating keyboard shortcuts and
% chords.
%
%\subsection{Dimensions}
% The macro \cs{keystroke} is subject to two user-accessible
% dimensions, \DescribeMacro{\keyscale} \cs{keyscale} and
% \DescribeMacro{\keypad} \cs{keypad}, each of which can be
% set in the user's document with \cs{setlength}.  The
% defaults are sane and these are probably only useful when
% using crazy large fonts, as crazy small ones are likely to
% look silly without significant adjustment to the drop
% shadow effect.
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
%\section{Implementation}
%
%    \begin{macrocode}
%<*package>
\RequirePackage{
  tikz,
  textcomp,
}
\usetikzlibrary{
  shadows,
}
%    \end{macrocode}
%
%\begin{macro}{\keyscale}
% A length which dictates how the ``keys'' are scaled.
% Default is 20 points.
%    \begin{macrocode}
\newdimen\keyscale
\keyscale=20pt
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\keypad}
% A length which dictates how much padding the decorated
% text receives, and also affects the border thickness.
%    \begin{macrocode}
\newdimen\keypad
\keypad=6pt
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\keystroke}
% This macro simply draws what looks like a keyboard key
% around some text.  I enjoy breaking eggs with sledgehammers,
% so Ti\emph{k}Z is used to decorate the text.  We begin
% with a node:
%    \begin{macrocode}
\newcommand*\keystroke[1]{%
  \tikz[baseline=(key.base)]
    \node[%
      draw,
%    \end{macrocode}
% The assumption is that a white key with a black shadow is
% going to look best on paper.  This may become adjustable
% in the future.
%    \begin{macrocode}
      fill=white,
      drop shadow={shadow xshift=0.25ex,shadow yshift=-0.25ex,fill=black,opacity=0.75},
      rectangle,
%    \end{macrocode}
% The rounded corners is hardcoded for now, as too much
% adjustment makes Ti\emph{k}Z barf.  Some padding, and
% the line width are adjustable with \cs{keypad} and the
% minimum height and width of the drawing can be messed
% with by setting \cs{keyscale}.
%    \begin{macrocode}
      rounded corners=4pt,
      inner sep=\keypad,
      minimum height=\keyscale,
      minimum width=1.5\keyscale,
      line width=0.125\keypad,
%    \end{macrocode}
% Render the font as \cs{large}, \cs{ttfamily}, and
% \cs{bfseries}.
%    \begin{macrocode}
      font=\large\ttfamily\bfseries
    ](key) {#1\strut}
  ;
}
%    \end{macrocode}
%\end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%\Finale
